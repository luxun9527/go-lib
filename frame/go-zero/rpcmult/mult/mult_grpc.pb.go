// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: mult.proto

package mult

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Login_FullMethodName          = "/mult.UserService/Login"
	UserService_UserInfo_FullMethodName       = "/mult.UserService/UserInfo"
	UserService_UserInfoUpdate_FullMethodName = "/mult.UserService/UserInfoUpdate"
	UserService_UserList_FullMethodName       = "/mult.UserService/UserList"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*UserInfoUpdateResp, error)
	UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, UserService_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*UserInfoUpdateResp, error) {
	out := new(UserInfoUpdateResp)
	err := c.cc.Invoke(ctx, UserService_UserInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	out := new(UserListResp)
	err := c.cc.Invoke(ctx, UserService_UserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	UserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error)
	UserInfoUpdate(context.Context, *UserInfoUpdateReq) (*UserInfoUpdateResp, error)
	UserList(context.Context, *UserListReq) (*UserListResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) UserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServiceServer) UserInfoUpdate(context.Context, *UserInfoUpdateReq) (*UserInfoUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoUpdate not implemented")
}
func (UnimplementedUserServiceServer) UserList(context.Context, *UserListReq) (*UserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfoUpdate(ctx, req.(*UserInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserList(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mult.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _UserService_UserInfo_Handler,
		},
		{
			MethodName: "UserInfoUpdate",
			Handler:    _UserService_UserInfoUpdate_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _UserService_UserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mult.proto",
}

const (
	UserRoleService_UserRoleList_FullMethodName   = "/mult.UserRoleService/UserRoleList"
	UserRoleService_UserRoleUpdate_FullMethodName = "/mult.UserRoleService/UserRoleUpdate"
	UserRoleService_UserRoleInfo_FullMethodName   = "/mult.UserRoleService/UserRoleInfo"
	UserRoleService_UserRoleAdd_FullMethodName    = "/mult.UserRoleService/UserRoleAdd"
	UserRoleService_UserRoleDelete_FullMethodName = "/mult.UserRoleService/UserRoleDelete"
)

// UserRoleServiceClient is the client API for UserRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRoleServiceClient interface {
	UserRoleList(ctx context.Context, in *UserRoleListReq, opts ...grpc.CallOption) (*UserRoleListResp, error)
	UserRoleUpdate(ctx context.Context, in *UserRoleUpdateReq, opts ...grpc.CallOption) (*UserRoleUpdateResp, error)
	UserRoleInfo(ctx context.Context, in *UserRoleInfoReq, opts ...grpc.CallOption) (*UserRoleInfoResp, error)
	UserRoleAdd(ctx context.Context, in *UserRoleAddReq, opts ...grpc.CallOption) (*UserRoleAddResp, error)
	UserRoleDelete(ctx context.Context, in *UserRoleDeleteReq, opts ...grpc.CallOption) (*UserRoleDeleteResp, error)
}

type userRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRoleServiceClient(cc grpc.ClientConnInterface) UserRoleServiceClient {
	return &userRoleServiceClient{cc}
}

func (c *userRoleServiceClient) UserRoleList(ctx context.Context, in *UserRoleListReq, opts ...grpc.CallOption) (*UserRoleListResp, error) {
	out := new(UserRoleListResp)
	err := c.cc.Invoke(ctx, UserRoleService_UserRoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) UserRoleUpdate(ctx context.Context, in *UserRoleUpdateReq, opts ...grpc.CallOption) (*UserRoleUpdateResp, error) {
	out := new(UserRoleUpdateResp)
	err := c.cc.Invoke(ctx, UserRoleService_UserRoleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) UserRoleInfo(ctx context.Context, in *UserRoleInfoReq, opts ...grpc.CallOption) (*UserRoleInfoResp, error) {
	out := new(UserRoleInfoResp)
	err := c.cc.Invoke(ctx, UserRoleService_UserRoleInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) UserRoleAdd(ctx context.Context, in *UserRoleAddReq, opts ...grpc.CallOption) (*UserRoleAddResp, error) {
	out := new(UserRoleAddResp)
	err := c.cc.Invoke(ctx, UserRoleService_UserRoleAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) UserRoleDelete(ctx context.Context, in *UserRoleDeleteReq, opts ...grpc.CallOption) (*UserRoleDeleteResp, error) {
	out := new(UserRoleDeleteResp)
	err := c.cc.Invoke(ctx, UserRoleService_UserRoleDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRoleServiceServer is the server API for UserRoleService service.
// All implementations must embed UnimplementedUserRoleServiceServer
// for forward compatibility
type UserRoleServiceServer interface {
	UserRoleList(context.Context, *UserRoleListReq) (*UserRoleListResp, error)
	UserRoleUpdate(context.Context, *UserRoleUpdateReq) (*UserRoleUpdateResp, error)
	UserRoleInfo(context.Context, *UserRoleInfoReq) (*UserRoleInfoResp, error)
	UserRoleAdd(context.Context, *UserRoleAddReq) (*UserRoleAddResp, error)
	UserRoleDelete(context.Context, *UserRoleDeleteReq) (*UserRoleDeleteResp, error)
	mustEmbedUnimplementedUserRoleServiceServer()
}

// UnimplementedUserRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserRoleServiceServer struct {
}

func (UnimplementedUserRoleServiceServer) UserRoleList(context.Context, *UserRoleListReq) (*UserRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleList not implemented")
}
func (UnimplementedUserRoleServiceServer) UserRoleUpdate(context.Context, *UserRoleUpdateReq) (*UserRoleUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleUpdate not implemented")
}
func (UnimplementedUserRoleServiceServer) UserRoleInfo(context.Context, *UserRoleInfoReq) (*UserRoleInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleInfo not implemented")
}
func (UnimplementedUserRoleServiceServer) UserRoleAdd(context.Context, *UserRoleAddReq) (*UserRoleAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleAdd not implemented")
}
func (UnimplementedUserRoleServiceServer) UserRoleDelete(context.Context, *UserRoleDeleteReq) (*UserRoleDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleDelete not implemented")
}
func (UnimplementedUserRoleServiceServer) mustEmbedUnimplementedUserRoleServiceServer() {}

// UnsafeUserRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRoleServiceServer will
// result in compilation errors.
type UnsafeUserRoleServiceServer interface {
	mustEmbedUnimplementedUserRoleServiceServer()
}

func RegisterUserRoleServiceServer(s grpc.ServiceRegistrar, srv UserRoleServiceServer) {
	s.RegisterService(&UserRoleService_ServiceDesc, srv)
}

func _UserRoleService_UserRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).UserRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_UserRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).UserRoleList(ctx, req.(*UserRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_UserRoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).UserRoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_UserRoleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).UserRoleUpdate(ctx, req.(*UserRoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_UserRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).UserRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_UserRoleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).UserRoleInfo(ctx, req.(*UserRoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_UserRoleAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).UserRoleAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_UserRoleAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).UserRoleAdd(ctx, req.(*UserRoleAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_UserRoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).UserRoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRoleService_UserRoleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).UserRoleDelete(ctx, req.(*UserRoleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRoleService_ServiceDesc is the grpc.ServiceDesc for UserRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mult.UserRoleService",
	HandlerType: (*UserRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRoleList",
			Handler:    _UserRoleService_UserRoleList_Handler,
		},
		{
			MethodName: "UserRoleUpdate",
			Handler:    _UserRoleService_UserRoleUpdate_Handler,
		},
		{
			MethodName: "UserRoleInfo",
			Handler:    _UserRoleService_UserRoleInfo_Handler,
		},
		{
			MethodName: "UserRoleAdd",
			Handler:    _UserRoleService_UserRoleAdd_Handler,
		},
		{
			MethodName: "UserRoleDelete",
			Handler:    _UserRoleService_UserRoleDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mult.proto",
}
