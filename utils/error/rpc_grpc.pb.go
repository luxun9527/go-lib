// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc.proto

//当别人导入这个protobuf文件，使用的包名 如 google/protobuf/empty.proto 定义的就是 package google.protobuf,我们要使用这个文件中message 使用方法为 package.Message
//如google.protobuf.Empty

package error

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Errors_Demo_FullMethodName = "/errors.Errors/Demo"
)

// ErrorsClient is the client API for Errors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorsClient interface {
	Demo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type errorsClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorsClient(cc grpc.ClientConnInterface) ErrorsClient {
	return &errorsClient{cc}
}

func (c *errorsClient) Demo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Errors_Demo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorsServer is the server API for Errors service.
// All implementations must embed UnimplementedErrorsServer
// for forward compatibility
type ErrorsServer interface {
	Demo(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedErrorsServer()
}

// UnimplementedErrorsServer must be embedded to have forward compatible implementations.
type UnimplementedErrorsServer struct {
}

func (UnimplementedErrorsServer) Demo(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}
func (UnimplementedErrorsServer) mustEmbedUnimplementedErrorsServer() {}

// UnsafeErrorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorsServer will
// result in compilation errors.
type UnsafeErrorsServer interface {
	mustEmbedUnimplementedErrorsServer()
}

func RegisterErrorsServer(s grpc.ServiceRegistrar, srv ErrorsServer) {
	s.RegisterService(&Errors_ServiceDesc, srv)
}

func _Errors_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorsServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Errors_Demo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorsServer).Demo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Errors_ServiceDesc is the grpc.ServiceDesc for Errors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Errors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errors.Errors",
	HandlerType: (*ErrorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Demo",
			Handler:    _Errors_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
