// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm/gentool/dal/model"
)

func newTdStkcode(db *gorm.DB, opts ...gen.DOOption) tdStkcode {
	_tdStkcode := tdStkcode{}

	_tdStkcode.tdStkcodeDo.UseDB(db, opts...)
	_tdStkcode.tdStkcodeDo.UseModel(&model.TdStkcode{})

	tableName := _tdStkcode.tdStkcodeDo.TableName()
	_tdStkcode.ALL = field.NewAsterisk(tableName)
	_tdStkcode.ID = field.NewInt64(tableName, "id")
	_tdStkcode.CreatedAt = field.NewInt64(tableName, "created_at")
	_tdStkcode.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_tdStkcode.ExchangeType = field.NewString(tableName, "exchange_type")
	_tdStkcode.MoneyType = field.NewString(tableName, "money_type")
	_tdStkcode.StockCode = field.NewString(tableName, "stock_code")
	_tdStkcode.StockName = field.NewString(tableName, "stock_name")
	_tdStkcode.StockFullname = field.NewString(tableName, "stock_fullname")
	_tdStkcode.MarginType = field.NewInt32(tableName, "margin_type")
	_tdStkcode.MarginValue = field.NewString(tableName, "margin_value")
	_tdStkcode.Financingrate = field.NewString(tableName, "financingrate")
	_tdStkcode.MaxMarginValue = field.NewString(tableName, "max_margin_value")
	_tdStkcode.QtyDecLen = field.NewInt32(tableName, "qty_dec_len")
	_tdStkcode.PriDecLen = field.NewInt32(tableName, "pri_dec_len")
	_tdStkcode.LotSize = field.NewInt32(tableName, "lot_size")
	_tdStkcode.SpreadTableCode = field.NewInt32(tableName, "spread_table_code")
	_tdStkcode.OpenPrice = field.NewString(tableName, "open_price")
	_tdStkcode.PreviousClosePrice = field.NewString(tableName, "previous_close_price")
	_tdStkcode.TradeFlag = field.NewInt32(tableName, "trade_flag")
	_tdStkcode.Status = field.NewInt32(tableName, "status")

	_tdStkcode.fillFieldMap()

	return _tdStkcode
}

type tdStkcode struct {
	tdStkcodeDo tdStkcodeDo

	ALL                field.Asterisk
	ID                 field.Int64  // 自增id
	CreatedAt          field.Int64  // 创建时间
	UpdatedAt          field.Int64  // 更新时间
	ExchangeType       field.String // 交易市场
	MoneyType          field.String // 币种类别
	StockCode          field.String // 证券代码
	StockName          field.String // 证券名称
	StockFullname      field.String // 证券全称
	MarginType         field.Int32  // 融资类型, 1-融资额度 2-融资比例
	MarginValue        field.String // 融资额度
	Financingrate      field.String // 融资比例% 50.20%
	MaxMarginValue     field.String // 融资上限额度
	QtyDecLen          field.Int32  // 数量小数位数
	PriDecLen          field.Int32  // 价格小数位数
	LotSize            field.Int32  // 每手股数
	SpreadTableCode    field.Int32  // 对应价差表编码  值为1:A,3:B,4:C,5:D
	OpenPrice          field.String // 开盘价
	PreviousClosePrice field.String // 昨收盘价
	TradeFlag          field.Int32  // 交易标志 0-初始化 1-允许交易 2-不允许交易
	Status             field.Int32  // 生效标志 0-初始化 1-生效 2-不生效

	fieldMap map[string]field.Expr
}

func (t tdStkcode) Table(newTableName string) *tdStkcode {
	t.tdStkcodeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tdStkcode) As(alias string) *tdStkcode {
	t.tdStkcodeDo.DO = *(t.tdStkcodeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tdStkcode) updateTableName(table string) *tdStkcode {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.CreatedAt = field.NewInt64(table, "created_at")
	t.UpdatedAt = field.NewInt64(table, "updated_at")
	t.ExchangeType = field.NewString(table, "exchange_type")
	t.MoneyType = field.NewString(table, "money_type")
	t.StockCode = field.NewString(table, "stock_code")
	t.StockName = field.NewString(table, "stock_name")
	t.StockFullname = field.NewString(table, "stock_fullname")
	t.MarginType = field.NewInt32(table, "margin_type")
	t.MarginValue = field.NewString(table, "margin_value")
	t.Financingrate = field.NewString(table, "financingrate")
	t.MaxMarginValue = field.NewString(table, "max_margin_value")
	t.QtyDecLen = field.NewInt32(table, "qty_dec_len")
	t.PriDecLen = field.NewInt32(table, "pri_dec_len")
	t.LotSize = field.NewInt32(table, "lot_size")
	t.SpreadTableCode = field.NewInt32(table, "spread_table_code")
	t.OpenPrice = field.NewString(table, "open_price")
	t.PreviousClosePrice = field.NewString(table, "previous_close_price")
	t.TradeFlag = field.NewInt32(table, "trade_flag")
	t.Status = field.NewInt32(table, "status")

	t.fillFieldMap()

	return t
}

func (t *tdStkcode) WithContext(ctx context.Context) *tdStkcodeDo {
	return t.tdStkcodeDo.WithContext(ctx)
}

func (t tdStkcode) TableName() string { return t.tdStkcodeDo.TableName() }

func (t tdStkcode) Alias() string { return t.tdStkcodeDo.Alias() }

func (t *tdStkcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tdStkcode) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["exchange_type"] = t.ExchangeType
	t.fieldMap["money_type"] = t.MoneyType
	t.fieldMap["stock_code"] = t.StockCode
	t.fieldMap["stock_name"] = t.StockName
	t.fieldMap["stock_fullname"] = t.StockFullname
	t.fieldMap["margin_type"] = t.MarginType
	t.fieldMap["margin_value"] = t.MarginValue
	t.fieldMap["financingrate"] = t.Financingrate
	t.fieldMap["max_margin_value"] = t.MaxMarginValue
	t.fieldMap["qty_dec_len"] = t.QtyDecLen
	t.fieldMap["pri_dec_len"] = t.PriDecLen
	t.fieldMap["lot_size"] = t.LotSize
	t.fieldMap["spread_table_code"] = t.SpreadTableCode
	t.fieldMap["open_price"] = t.OpenPrice
	t.fieldMap["previous_close_price"] = t.PreviousClosePrice
	t.fieldMap["trade_flag"] = t.TradeFlag
	t.fieldMap["status"] = t.Status
}

func (t tdStkcode) clone(db *gorm.DB) tdStkcode {
	t.tdStkcodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tdStkcode) replaceDB(db *gorm.DB) tdStkcode {
	t.tdStkcodeDo.ReplaceDB(db)
	return t
}

type tdStkcodeDo struct{ gen.DO }

func (t tdStkcodeDo) Debug() *tdStkcodeDo {
	return t.withDO(t.DO.Debug())
}

func (t tdStkcodeDo) WithContext(ctx context.Context) *tdStkcodeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tdStkcodeDo) ReadDB() *tdStkcodeDo {
	return t.Clauses(dbresolver.Read)
}

func (t tdStkcodeDo) WriteDB() *tdStkcodeDo {
	return t.Clauses(dbresolver.Write)
}

func (t tdStkcodeDo) Session(config *gorm.Session) *tdStkcodeDo {
	return t.withDO(t.DO.Session(config))
}

func (t tdStkcodeDo) Clauses(conds ...clause.Expression) *tdStkcodeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tdStkcodeDo) Returning(value interface{}, columns ...string) *tdStkcodeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tdStkcodeDo) Not(conds ...gen.Condition) *tdStkcodeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tdStkcodeDo) Or(conds ...gen.Condition) *tdStkcodeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tdStkcodeDo) Select(conds ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tdStkcodeDo) Where(conds ...gen.Condition) *tdStkcodeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tdStkcodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tdStkcodeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tdStkcodeDo) Order(conds ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tdStkcodeDo) Distinct(cols ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tdStkcodeDo) Omit(cols ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tdStkcodeDo) Join(table schema.Tabler, on ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tdStkcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tdStkcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tdStkcodeDo) Group(cols ...field.Expr) *tdStkcodeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tdStkcodeDo) Having(conds ...gen.Condition) *tdStkcodeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tdStkcodeDo) Limit(limit int) *tdStkcodeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tdStkcodeDo) Offset(offset int) *tdStkcodeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tdStkcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tdStkcodeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tdStkcodeDo) Unscoped() *tdStkcodeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tdStkcodeDo) Create(values ...*model.TdStkcode) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tdStkcodeDo) CreateInBatches(values []*model.TdStkcode, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tdStkcodeDo) Save(values ...*model.TdStkcode) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tdStkcodeDo) First() (*model.TdStkcode, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TdStkcode), nil
	}
}

func (t tdStkcodeDo) Take() (*model.TdStkcode, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TdStkcode), nil
	}
}

func (t tdStkcodeDo) Last() (*model.TdStkcode, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TdStkcode), nil
	}
}

func (t tdStkcodeDo) Find() ([]*model.TdStkcode, error) {
	result, err := t.DO.Find()
	return result.([]*model.TdStkcode), err
}

func (t tdStkcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TdStkcode, err error) {
	buf := make([]*model.TdStkcode, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tdStkcodeDo) FindInBatches(result *[]*model.TdStkcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tdStkcodeDo) Attrs(attrs ...field.AssignExpr) *tdStkcodeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tdStkcodeDo) Assign(attrs ...field.AssignExpr) *tdStkcodeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tdStkcodeDo) Joins(fields ...field.RelationField) *tdStkcodeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tdStkcodeDo) Preload(fields ...field.RelationField) *tdStkcodeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tdStkcodeDo) FirstOrInit() (*model.TdStkcode, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TdStkcode), nil
	}
}

func (t tdStkcodeDo) FirstOrCreate() (*model.TdStkcode, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TdStkcode), nil
	}
}

func (t tdStkcodeDo) FindByPage(offset int, limit int) (result []*model.TdStkcode, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tdStkcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tdStkcodeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tdStkcodeDo) Delete(models ...*model.TdStkcode) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tdStkcodeDo) withDO(do gen.Dao) *tdStkcodeDo {
	t.DO = *do.(*gen.DO)
	return t
}
