// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: account/account.proto

//当别人导入这个protobuf文件，使用的包名 如 google/protobuf/empty.proto 定义的就是 package google.protobuf,我们要使用这个文件中message 使用方法为 package.Message
//如google.protobuf.Empty

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountSrv_GetAllUserInfo_FullMethodName = "/account.AccountSrv/GetAllUserInfo"
	AccountSrv_GetAccountInfo_FullMethodName = "/account.AccountSrv/GetAccountInfo"
	AccountSrv_RegisterUser_FullMethodName   = "/account.AccountSrv/RegisterUser"
	AccountSrv_ValidateToken_FullMethodName  = "/account.AccountSrv/ValidateToken"
	AccountSrv_Login_FullMethodName          = "/account.AccountSrv/Login"
)

// AccountSrvClient is the client API for AccountSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSrvClient interface {
	GetAllUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAccountInfoResp, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error)
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
}

type accountSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSrvClient(cc grpc.ClientConnInterface) AccountSrvClient {
	return &accountSrvClient{cc}
}

func (c *accountSrvClient) GetAllUserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAccountInfoResp, error) {
	out := new(GetAccountInfoResp)
	err := c.cc.Invoke(ctx, AccountSrv_GetAllUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSrvClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoResp, error) {
	out := new(GetAccountInfoResp)
	err := c.cc.Invoke(ctx, AccountSrv_GetAccountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSrvClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountSrv_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSrvClient) ValidateToken(ctx context.Context, in *ValidateTokenReq, opts ...grpc.CallOption) (*ValidateTokenResp, error) {
	out := new(ValidateTokenResp)
	err := c.cc.Invoke(ctx, AccountSrv_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSrvClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, AccountSrv_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSrvServer is the server API for AccountSrv service.
// All implementations must embed UnimplementedAccountSrvServer
// for forward compatibility
type AccountSrvServer interface {
	GetAllUserInfo(context.Context, *emptypb.Empty) (*GetAccountInfoResp, error)
	GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error)
	RegisterUser(context.Context, *RegisterUserReq) (*emptypb.Empty, error)
	ValidateToken(context.Context, *ValidateTokenReq) (*ValidateTokenResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	mustEmbedUnimplementedAccountSrvServer()
}

// UnimplementedAccountSrvServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSrvServer struct {
}

func (UnimplementedAccountSrvServer) GetAllUserInfo(context.Context, *emptypb.Empty) (*GetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserInfo not implemented")
}
func (UnimplementedAccountSrvServer) GetAccountInfo(context.Context, *GetAccountInfoReq) (*GetAccountInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedAccountSrvServer) RegisterUser(context.Context, *RegisterUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAccountSrvServer) ValidateToken(context.Context, *ValidateTokenReq) (*ValidateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAccountSrvServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountSrvServer) mustEmbedUnimplementedAccountSrvServer() {}

// UnsafeAccountSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSrvServer will
// result in compilation errors.
type UnsafeAccountSrvServer interface {
	mustEmbedUnimplementedAccountSrvServer()
}

func RegisterAccountSrvServer(s grpc.ServiceRegistrar, srv AccountSrvServer) {
	s.RegisterService(&AccountSrv_ServiceDesc, srv)
}

func _AccountSrv_GetAllUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).GetAllUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSrv_GetAllUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).GetAllUserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSrv_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSrv_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSrv_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSrv_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSrv_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSrv_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).ValidateToken(ctx, req.(*ValidateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSrv_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSrv_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSrv_ServiceDesc is the grpc.ServiceDesc for AccountSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountSrv",
	HandlerType: (*AccountSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUserInfo",
			Handler:    _AccountSrv_GetAllUserInfo_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _AccountSrv_GetAccountInfo_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _AccountSrv_RegisterUser_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AccountSrv_ValidateToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AccountSrv_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}
