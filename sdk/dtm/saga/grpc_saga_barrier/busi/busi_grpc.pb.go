// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: busi.proto

package busi

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Busi_TransIn_FullMethodName              = "/busi.Busi/TransIn"
	Busi_TransOut_FullMethodName             = "/busi.Busi/TransOut"
	Busi_PayCommissions_FullMethodName       = "/busi.Busi/PayCommissions"
	Busi_PayCommissionsRevert_FullMethodName = "/busi.Busi/PayCommissionsRevert"
	Busi_TransInRevert_FullMethodName        = "/busi.Busi/TransInRevert"
	Busi_TransOutRevert_FullMethodName       = "/busi.Busi/TransOutRevert"
	Busi_TransInConfirm_FullMethodName       = "/busi.Busi/TransInConfirm"
	Busi_TransOutConfirm_FullMethodName      = "/busi.Busi/TransOutConfirm"
	Busi_XaNotify_FullMethodName             = "/busi.Busi/XaNotify"
	Busi_TransInXa_FullMethodName            = "/busi.Busi/TransInXa"
	Busi_TransOutXa_FullMethodName           = "/busi.Busi/TransOutXa"
	Busi_TransInTcc_FullMethodName           = "/busi.Busi/TransInTcc"
	Busi_TransOutTcc_FullMethodName          = "/busi.Busi/TransOutTcc"
	Busi_TransInTccNested_FullMethodName     = "/busi.Busi/TransInTccNested"
	Busi_TransInBSaga_FullMethodName         = "/busi.Busi/TransInBSaga"
	Busi_TransOutBSaga_FullMethodName        = "/busi.Busi/TransOutBSaga"
	Busi_TransInRevertBSaga_FullMethodName   = "/busi.Busi/TransInRevertBSaga"
	Busi_TransOutRevertBSaga_FullMethodName  = "/busi.Busi/TransOutRevertBSaga"
	Busi_TransOutHeaderYes_FullMethodName    = "/busi.Busi/TransOutHeaderYes"
	Busi_TransOutHeaderNo_FullMethodName     = "/busi.Busi/TransOutHeaderNo"
	Busi_TransInRedis_FullMethodName         = "/busi.Busi/TransInRedis"
	Busi_TransOutRedis_FullMethodName        = "/busi.Busi/TransOutRedis"
	Busi_TransInRevertRedis_FullMethodName   = "/busi.Busi/TransInRevertRedis"
	Busi_TransOutRevertRedis_FullMethodName  = "/busi.Busi/TransOutRevertRedis"
	Busi_QueryPrepared_FullMethodName        = "/busi.Busi/QueryPrepared"
	Busi_QueryPreparedB_FullMethodName       = "/busi.Busi/QueryPreparedB"
	Busi_QueryPreparedRedis_FullMethodName   = "/busi.Busi/QueryPreparedRedis"
)

// BusiClient is the client API for Busi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusiClient interface {
	TransIn(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOut(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	PayCommissions(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	PayCommissionsRevert(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInRevert(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutRevert(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInConfirm(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutConfirm(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	XaNotify(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInXa(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutXa(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInTcc(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutTcc(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInTccNested(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInRevertBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutRevertBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutHeaderYes(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutHeaderNo(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransInRevertRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	TransOutRevertRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	QueryPrepared(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*BusiReply, error)
	QueryPreparedB(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
	QueryPreparedRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error)
}

type busiClient struct {
	cc grpc.ClientConnInterface
}

func NewBusiClient(cc grpc.ClientConnInterface) BusiClient {
	return &busiClient{cc}
}

func (c *busiClient) TransIn(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOut(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) PayCommissions(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_PayCommissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) PayCommissionsRevert(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_PayCommissionsRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInRevert(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutRevert(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInConfirm(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutConfirm(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) XaNotify(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_XaNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInXa(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInXa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutXa(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutXa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInTcc(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInTcc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutTcc(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutTcc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInTccNested(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInTccNested_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInBSaga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutBSaga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInRevertBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInRevertBSaga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutRevertBSaga(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutRevertBSaga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutHeaderYes(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutHeaderYes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutHeaderNo(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutHeaderNo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInRedis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutRedis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransInRevertRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransInRevertRedis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) TransOutRevertRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_TransOutRevertRedis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) QueryPrepared(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*BusiReply, error) {
	out := new(BusiReply)
	err := c.cc.Invoke(ctx, Busi_QueryPrepared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) QueryPreparedB(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_QueryPreparedB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *busiClient) QueryPreparedRedis(ctx context.Context, in *ReqGrpc, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Busi_QueryPreparedRedis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusiServer is the server API for Busi service.
// All implementations must embed UnimplementedBusiServer
// for forward compatibility
type BusiServer interface {
	TransIn(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOut(context.Context, *ReqGrpc) (*empty.Empty, error)
	PayCommissions(context.Context, *ReqGrpc) (*empty.Empty, error)
	PayCommissionsRevert(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInRevert(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutRevert(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInConfirm(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutConfirm(context.Context, *ReqGrpc) (*empty.Empty, error)
	XaNotify(context.Context, *empty.Empty) (*empty.Empty, error)
	TransInXa(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutXa(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInTcc(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutTcc(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInTccNested(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInBSaga(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutBSaga(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInRevertBSaga(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutRevertBSaga(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutHeaderYes(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutHeaderNo(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInRedis(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutRedis(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransInRevertRedis(context.Context, *ReqGrpc) (*empty.Empty, error)
	TransOutRevertRedis(context.Context, *ReqGrpc) (*empty.Empty, error)
	QueryPrepared(context.Context, *ReqGrpc) (*BusiReply, error)
	QueryPreparedB(context.Context, *ReqGrpc) (*empty.Empty, error)
	QueryPreparedRedis(context.Context, *ReqGrpc) (*empty.Empty, error)
	mustEmbedUnimplementedBusiServer()
}

// UnimplementedBusiServer must be embedded to have forward compatible implementations.
type UnimplementedBusiServer struct {
}

func (UnimplementedBusiServer) TransIn(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransIn not implemented")
}
func (UnimplementedBusiServer) TransOut(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOut not implemented")
}
func (UnimplementedBusiServer) PayCommissions(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCommissions not implemented")
}
func (UnimplementedBusiServer) PayCommissionsRevert(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayCommissionsRevert not implemented")
}
func (UnimplementedBusiServer) TransInRevert(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInRevert not implemented")
}
func (UnimplementedBusiServer) TransOutRevert(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutRevert not implemented")
}
func (UnimplementedBusiServer) TransInConfirm(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInConfirm not implemented")
}
func (UnimplementedBusiServer) TransOutConfirm(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutConfirm not implemented")
}
func (UnimplementedBusiServer) XaNotify(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XaNotify not implemented")
}
func (UnimplementedBusiServer) TransInXa(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInXa not implemented")
}
func (UnimplementedBusiServer) TransOutXa(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutXa not implemented")
}
func (UnimplementedBusiServer) TransInTcc(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInTcc not implemented")
}
func (UnimplementedBusiServer) TransOutTcc(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutTcc not implemented")
}
func (UnimplementedBusiServer) TransInTccNested(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInTccNested not implemented")
}
func (UnimplementedBusiServer) TransInBSaga(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInBSaga not implemented")
}
func (UnimplementedBusiServer) TransOutBSaga(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutBSaga not implemented")
}
func (UnimplementedBusiServer) TransInRevertBSaga(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInRevertBSaga not implemented")
}
func (UnimplementedBusiServer) TransOutRevertBSaga(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutRevertBSaga not implemented")
}
func (UnimplementedBusiServer) TransOutHeaderYes(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutHeaderYes not implemented")
}
func (UnimplementedBusiServer) TransOutHeaderNo(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutHeaderNo not implemented")
}
func (UnimplementedBusiServer) TransInRedis(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInRedis not implemented")
}
func (UnimplementedBusiServer) TransOutRedis(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutRedis not implemented")
}
func (UnimplementedBusiServer) TransInRevertRedis(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransInRevertRedis not implemented")
}
func (UnimplementedBusiServer) TransOutRevertRedis(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransOutRevertRedis not implemented")
}
func (UnimplementedBusiServer) QueryPrepared(context.Context, *ReqGrpc) (*BusiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPrepared not implemented")
}
func (UnimplementedBusiServer) QueryPreparedB(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPreparedB not implemented")
}
func (UnimplementedBusiServer) QueryPreparedRedis(context.Context, *ReqGrpc) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPreparedRedis not implemented")
}
func (UnimplementedBusiServer) mustEmbedUnimplementedBusiServer() {}

// UnsafeBusiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusiServer will
// result in compilation errors.
type UnsafeBusiServer interface {
	mustEmbedUnimplementedBusiServer()
}

func RegisterBusiServer(s grpc.ServiceRegistrar, srv BusiServer) {
	s.RegisterService(&Busi_ServiceDesc, srv)
}

func _Busi_TransIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransIn(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOut(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_PayCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).PayCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_PayCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).PayCommissions(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_PayCommissionsRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).PayCommissionsRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_PayCommissionsRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).PayCommissionsRevert(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInRevert(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutRevert(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInConfirm(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutConfirm(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_XaNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).XaNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_XaNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).XaNotify(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInXa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInXa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInXa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInXa(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutXa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutXa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutXa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutXa(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInTcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInTcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInTcc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInTcc(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutTcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutTcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutTcc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutTcc(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInTccNested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInTccNested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInTccNested_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInTccNested(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInBSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInBSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInBSaga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInBSaga(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutBSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutBSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutBSaga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutBSaga(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInRevertBSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInRevertBSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInRevertBSaga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInRevertBSaga(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutRevertBSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutRevertBSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutRevertBSaga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutRevertBSaga(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutHeaderYes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutHeaderYes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutHeaderYes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutHeaderYes(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutHeaderNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutHeaderNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutHeaderNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutHeaderNo(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInRedis(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutRedis(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransInRevertRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransInRevertRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransInRevertRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransInRevertRedis(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_TransOutRevertRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).TransOutRevertRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_TransOutRevertRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).TransOutRevertRedis(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_QueryPrepared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).QueryPrepared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_QueryPrepared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).QueryPrepared(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_QueryPreparedB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).QueryPreparedB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_QueryPreparedB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).QueryPreparedB(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Busi_QueryPreparedRedis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusiServer).QueryPreparedRedis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busi_QueryPreparedRedis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusiServer).QueryPreparedRedis(ctx, req.(*ReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

// Busi_ServiceDesc is the grpc.ServiceDesc for Busi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Busi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "busi.Busi",
	HandlerType: (*BusiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransIn",
			Handler:    _Busi_TransIn_Handler,
		},
		{
			MethodName: "TransOut",
			Handler:    _Busi_TransOut_Handler,
		},
		{
			MethodName: "PayCommissions",
			Handler:    _Busi_PayCommissions_Handler,
		},
		{
			MethodName: "PayCommissionsRevert",
			Handler:    _Busi_PayCommissionsRevert_Handler,
		},
		{
			MethodName: "TransInRevert",
			Handler:    _Busi_TransInRevert_Handler,
		},
		{
			MethodName: "TransOutRevert",
			Handler:    _Busi_TransOutRevert_Handler,
		},
		{
			MethodName: "TransInConfirm",
			Handler:    _Busi_TransInConfirm_Handler,
		},
		{
			MethodName: "TransOutConfirm",
			Handler:    _Busi_TransOutConfirm_Handler,
		},
		{
			MethodName: "XaNotify",
			Handler:    _Busi_XaNotify_Handler,
		},
		{
			MethodName: "TransInXa",
			Handler:    _Busi_TransInXa_Handler,
		},
		{
			MethodName: "TransOutXa",
			Handler:    _Busi_TransOutXa_Handler,
		},
		{
			MethodName: "TransInTcc",
			Handler:    _Busi_TransInTcc_Handler,
		},
		{
			MethodName: "TransOutTcc",
			Handler:    _Busi_TransOutTcc_Handler,
		},
		{
			MethodName: "TransInTccNested",
			Handler:    _Busi_TransInTccNested_Handler,
		},
		{
			MethodName: "TransInBSaga",
			Handler:    _Busi_TransInBSaga_Handler,
		},
		{
			MethodName: "TransOutBSaga",
			Handler:    _Busi_TransOutBSaga_Handler,
		},
		{
			MethodName: "TransInRevertBSaga",
			Handler:    _Busi_TransInRevertBSaga_Handler,
		},
		{
			MethodName: "TransOutRevertBSaga",
			Handler:    _Busi_TransOutRevertBSaga_Handler,
		},
		{
			MethodName: "TransOutHeaderYes",
			Handler:    _Busi_TransOutHeaderYes_Handler,
		},
		{
			MethodName: "TransOutHeaderNo",
			Handler:    _Busi_TransOutHeaderNo_Handler,
		},
		{
			MethodName: "TransInRedis",
			Handler:    _Busi_TransInRedis_Handler,
		},
		{
			MethodName: "TransOutRedis",
			Handler:    _Busi_TransOutRedis_Handler,
		},
		{
			MethodName: "TransInRevertRedis",
			Handler:    _Busi_TransInRevertRedis_Handler,
		},
		{
			MethodName: "TransOutRevertRedis",
			Handler:    _Busi_TransOutRevertRedis_Handler,
		},
		{
			MethodName: "QueryPrepared",
			Handler:    _Busi_QueryPrepared_Handler,
		},
		{
			MethodName: "QueryPreparedB",
			Handler:    _Busi_QueryPreparedB_Handler,
		},
		{
			MethodName: "QueryPreparedRedis",
			Handler:    _Busi_QueryPreparedRedis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "busi.proto",
}
