// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newKline(db *gorm.DB, opts ...gen.DOOption) kline {
	_kline := kline{}

	_kline.klineDo.UseDB(db, opts...)
	_kline.klineDo.UseModel(&model.Kline{})

	tableName := _kline.klineDo.TableName()
	_kline.ALL = field.NewAsterisk(tableName)
	_kline.ID = field.NewInt64(tableName, "id")
	_kline.StartTime = field.NewInt64(tableName, "start_time")
	_kline.EndTime = field.NewInt64(tableName, "end_time")
	_kline.Symbol = field.NewString(tableName, "symbol")
	_kline.SymbolID = field.NewInt32(tableName, "symbol_id")
	_kline.KlineType = field.NewInt32(tableName, "kline_type")
	_kline.Open = field.NewString(tableName, "open")
	_kline.High = field.NewString(tableName, "high")
	_kline.Low = field.NewString(tableName, "low")
	_kline.Close = field.NewString(tableName, "close")
	_kline.Volume = field.NewString(tableName, "volume")
	_kline.Turnover = field.NewString(tableName, "turnover")
	_kline.Range = field.NewString(tableName, "range")

	_kline.fillFieldMap()

	return _kline
}

type kline struct {
	klineDo klineDo

	ALL       field.Asterisk
	ID        field.Int64
	StartTime field.Int64  // k线开始时间
	EndTime   field.Int64  // k线结束时间
	Symbol    field.String // 交易对
	SymbolID  field.Int32  // 交易对id
	KlineType field.Int32  // k线类型1分钟 5分钟
	Open      field.String // 开盘价
	High      field.String // k线内最高价
	Low       field.String // k线内最低价
	Close     field.String // 收盘价
	Volume    field.String // 成交量(基础币数量)
	Turnover  field.String // 成交额(计价币数量)
	Range     field.String // 涨跌幅

	fieldMap map[string]field.Expr
}

func (k kline) Table(newTableName string) *kline {
	k.klineDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kline) As(alias string) *kline {
	k.klineDo.DO = *(k.klineDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kline) updateTableName(table string) *kline {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt64(table, "id")
	k.StartTime = field.NewInt64(table, "start_time")
	k.EndTime = field.NewInt64(table, "end_time")
	k.Symbol = field.NewString(table, "symbol")
	k.SymbolID = field.NewInt32(table, "symbol_id")
	k.KlineType = field.NewInt32(table, "kline_type")
	k.Open = field.NewString(table, "open")
	k.High = field.NewString(table, "high")
	k.Low = field.NewString(table, "low")
	k.Close = field.NewString(table, "close")
	k.Volume = field.NewString(table, "volume")
	k.Turnover = field.NewString(table, "turnover")
	k.Range = field.NewString(table, "range")

	k.fillFieldMap()

	return k
}

func (k *kline) WithContext(ctx context.Context) *klineDo { return k.klineDo.WithContext(ctx) }

func (k kline) TableName() string { return k.klineDo.TableName() }

func (k kline) Alias() string { return k.klineDo.Alias() }

func (k kline) Columns(cols ...field.Expr) gen.Columns { return k.klineDo.Columns(cols...) }

func (k *kline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kline) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 13)
	k.fieldMap["id"] = k.ID
	k.fieldMap["start_time"] = k.StartTime
	k.fieldMap["end_time"] = k.EndTime
	k.fieldMap["symbol"] = k.Symbol
	k.fieldMap["symbol_id"] = k.SymbolID
	k.fieldMap["kline_type"] = k.KlineType
	k.fieldMap["open"] = k.Open
	k.fieldMap["high"] = k.High
	k.fieldMap["low"] = k.Low
	k.fieldMap["close"] = k.Close
	k.fieldMap["volume"] = k.Volume
	k.fieldMap["turnover"] = k.Turnover
	k.fieldMap["range"] = k.Range
}

func (k kline) clone(db *gorm.DB) kline {
	k.klineDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kline) replaceDB(db *gorm.DB) kline {
	k.klineDo.ReplaceDB(db)
	return k
}

type klineDo struct{ gen.DO }

func (k klineDo) Debug() *klineDo {
	return k.withDO(k.DO.Debug())
}

func (k klineDo) WithContext(ctx context.Context) *klineDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k klineDo) ReadDB() *klineDo {
	return k.Clauses(dbresolver.Read)
}

func (k klineDo) WriteDB() *klineDo {
	return k.Clauses(dbresolver.Write)
}

func (k klineDo) Session(config *gorm.Session) *klineDo {
	return k.withDO(k.DO.Session(config))
}

func (k klineDo) Clauses(conds ...clause.Expression) *klineDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k klineDo) Returning(value interface{}, columns ...string) *klineDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k klineDo) Not(conds ...gen.Condition) *klineDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k klineDo) Or(conds ...gen.Condition) *klineDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k klineDo) Select(conds ...field.Expr) *klineDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k klineDo) Where(conds ...gen.Condition) *klineDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k klineDo) Order(conds ...field.Expr) *klineDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k klineDo) Distinct(cols ...field.Expr) *klineDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k klineDo) Omit(cols ...field.Expr) *klineDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k klineDo) Join(table schema.Tabler, on ...field.Expr) *klineDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k klineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *klineDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k klineDo) RightJoin(table schema.Tabler, on ...field.Expr) *klineDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k klineDo) Group(cols ...field.Expr) *klineDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k klineDo) Having(conds ...gen.Condition) *klineDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k klineDo) Limit(limit int) *klineDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k klineDo) Offset(offset int) *klineDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k klineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *klineDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k klineDo) Unscoped() *klineDo {
	return k.withDO(k.DO.Unscoped())
}

func (k klineDo) Create(values ...*model.Kline) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k klineDo) CreateInBatches(values []*model.Kline, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k klineDo) Save(values ...*model.Kline) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k klineDo) First() (*model.Kline, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kline), nil
	}
}

func (k klineDo) Take() (*model.Kline, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kline), nil
	}
}

func (k klineDo) Last() (*model.Kline, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kline), nil
	}
}

func (k klineDo) Find() ([]*model.Kline, error) {
	result, err := k.DO.Find()
	return result.([]*model.Kline), err
}

func (k klineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Kline, err error) {
	buf := make([]*model.Kline, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k klineDo) FindInBatches(result *[]*model.Kline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k klineDo) Attrs(attrs ...field.AssignExpr) *klineDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k klineDo) Assign(attrs ...field.AssignExpr) *klineDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k klineDo) Joins(fields ...field.RelationField) *klineDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k klineDo) Preload(fields ...field.RelationField) *klineDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k klineDo) FirstOrInit() (*model.Kline, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kline), nil
	}
}

func (k klineDo) FirstOrCreate() (*model.Kline, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Kline), nil
	}
}

func (k klineDo) FindByPage(offset int, limit int) (result []*model.Kline, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k klineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k klineDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k klineDo) Delete(models ...*model.Kline) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *klineDo) withDO(do gen.Dao) *klineDo {
	k.DO = *do.(*gen.DO)
	return k
}
