// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newProfile(db *gorm.DB, opts ...gen.DOOption) profile {
	_profile := profile{}

	_profile.profileDo.UseDB(db, opts...)
	_profile.profileDo.UseModel(&model.Profile{})

	tableName := _profile.profileDo.TableName()
	_profile.ALL = field.NewAsterisk(tableName)
	_profile.ID = field.NewInt32(tableName, "id")
	_profile.UserID = field.NewInt32(tableName, "user_id")
	_profile.Nickname = field.NewString(tableName, "nickname")
	_profile.Desc = field.NewString(tableName, "desc")
	_profile.CreatedAt = field.NewInt64(tableName, "created_at")
	_profile.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_profile.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_profile.fillFieldMap()

	return _profile
}

type profile struct {
	profileDo profileDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32  // 用户id
	Nickname  field.String // 昵称
	Desc      field.String // 描述
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 更新时间
	DeletedAt field.Int64  // 删除时间

	fieldMap map[string]field.Expr
}

func (p profile) Table(newTableName string) *profile {
	p.profileDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p profile) As(alias string) *profile {
	p.profileDo.DO = *(p.profileDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *profile) updateTableName(table string) *profile {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.UserID = field.NewInt32(table, "user_id")
	p.Nickname = field.NewString(table, "nickname")
	p.Desc = field.NewString(table, "desc")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.DeletedAt = field.NewInt64(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *profile) WithContext(ctx context.Context) *profileDo { return p.profileDo.WithContext(ctx) }

func (p profile) TableName() string { return p.profileDo.TableName() }

func (p profile) Alias() string { return p.profileDo.Alias() }

func (p profile) Columns(cols ...field.Expr) gen.Columns { return p.profileDo.Columns(cols...) }

func (p *profile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *profile) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["nickname"] = p.Nickname
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p profile) clone(db *gorm.DB) profile {
	p.profileDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p profile) replaceDB(db *gorm.DB) profile {
	p.profileDo.ReplaceDB(db)
	return p
}

type profileDo struct{ gen.DO }

func (p profileDo) Debug() *profileDo {
	return p.withDO(p.DO.Debug())
}

func (p profileDo) WithContext(ctx context.Context) *profileDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p profileDo) ReadDB() *profileDo {
	return p.Clauses(dbresolver.Read)
}

func (p profileDo) WriteDB() *profileDo {
	return p.Clauses(dbresolver.Write)
}

func (p profileDo) Session(config *gorm.Session) *profileDo {
	return p.withDO(p.DO.Session(config))
}

func (p profileDo) Clauses(conds ...clause.Expression) *profileDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p profileDo) Returning(value interface{}, columns ...string) *profileDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p profileDo) Not(conds ...gen.Condition) *profileDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p profileDo) Or(conds ...gen.Condition) *profileDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p profileDo) Select(conds ...field.Expr) *profileDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p profileDo) Where(conds ...gen.Condition) *profileDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p profileDo) Order(conds ...field.Expr) *profileDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p profileDo) Distinct(cols ...field.Expr) *profileDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p profileDo) Omit(cols ...field.Expr) *profileDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p profileDo) Join(table schema.Tabler, on ...field.Expr) *profileDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p profileDo) LeftJoin(table schema.Tabler, on ...field.Expr) *profileDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p profileDo) RightJoin(table schema.Tabler, on ...field.Expr) *profileDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p profileDo) Group(cols ...field.Expr) *profileDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p profileDo) Having(conds ...gen.Condition) *profileDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p profileDo) Limit(limit int) *profileDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p profileDo) Offset(offset int) *profileDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p profileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *profileDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p profileDo) Unscoped() *profileDo {
	return p.withDO(p.DO.Unscoped())
}

func (p profileDo) Create(values ...*model.Profile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p profileDo) CreateInBatches(values []*model.Profile, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p profileDo) Save(values ...*model.Profile) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p profileDo) First() (*model.Profile, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Profile), nil
	}
}

func (p profileDo) Take() (*model.Profile, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Profile), nil
	}
}

func (p profileDo) Last() (*model.Profile, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Profile), nil
	}
}

func (p profileDo) Find() ([]*model.Profile, error) {
	result, err := p.DO.Find()
	return result.([]*model.Profile), err
}

func (p profileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Profile, err error) {
	buf := make([]*model.Profile, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p profileDo) FindInBatches(result *[]*model.Profile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p profileDo) Attrs(attrs ...field.AssignExpr) *profileDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p profileDo) Assign(attrs ...field.AssignExpr) *profileDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p profileDo) Joins(fields ...field.RelationField) *profileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p profileDo) Preload(fields ...field.RelationField) *profileDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p profileDo) FirstOrInit() (*model.Profile, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Profile), nil
	}
}

func (p profileDo) FirstOrCreate() (*model.Profile, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Profile), nil
	}
}

func (p profileDo) FindByPage(offset int, limit int) (result []*model.Profile, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p profileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p profileDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p profileDo) Delete(models ...*model.Profile) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *profileDo) withDO(do gen.Dao) *profileDo {
	p.DO = *do.(*gen.DO)
	return p
}
