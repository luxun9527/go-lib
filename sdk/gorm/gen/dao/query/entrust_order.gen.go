// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newEntrustOrder(db *gorm.DB, opts ...gen.DOOption) entrustOrder {
	_entrustOrder := entrustOrder{}

	_entrustOrder.entrustOrderDo.UseDB(db, opts...)
	_entrustOrder.entrustOrderDo.UseModel(&model.EntrustOrder{})

	tableName := _entrustOrder.entrustOrderDo.TableName()
	_entrustOrder.ALL = field.NewAsterisk(tableName)
	_entrustOrder.ID = field.NewInt32(tableName, "id")
	_entrustOrder.OrderID = field.NewString(tableName, "order_id")
	_entrustOrder.UserID = field.NewInt32(tableName, "user_id")
	_entrustOrder.SymbolID = field.NewInt32(tableName, "symbol_id")
	_entrustOrder.SymbolName = field.NewString(tableName, "symbol_name")
	_entrustOrder.Qty = field.NewString(tableName, "qty")
	_entrustOrder.Price = field.NewString(tableName, "price")
	_entrustOrder.Side = field.NewInt32(tableName, "side")
	_entrustOrder.Amount = field.NewString(tableName, "amount")
	_entrustOrder.Status = field.NewInt32(tableName, "status")
	_entrustOrder.OrderType = field.NewInt32(tableName, "order_type")
	_entrustOrder.FilledQty = field.NewString(tableName, "filled_qty")
	_entrustOrder.UnFilledQty = field.NewString(tableName, "un_filled_qty")
	_entrustOrder.FilledAvgPrice = field.NewString(tableName, "filled_avg_price")
	_entrustOrder.FilledAmount = field.NewString(tableName, "filled_amount")
	_entrustOrder.UnFilledAmount = field.NewString(tableName, "un_filled_amount")
	_entrustOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_entrustOrder.UpdatedAt = field.NewTime(tableName, "updated_at")

	_entrustOrder.fillFieldMap()

	return _entrustOrder
}

type entrustOrder struct {
	entrustOrderDo entrustOrderDo

	ALL            field.Asterisk
	ID             field.Int32
	OrderID        field.String // uuid
	UserID         field.Int32  // 用户id
	SymbolID       field.Int32  // 交易对ID
	SymbolName     field.String // 交易对名称
	Qty            field.String // 下单数量
	Price          field.String // 价格
	Side           field.Int32  // 方向1买 2卖
	Amount         field.String // 金额
	Status         field.Int32  // 状态1新订单2部分成交 3全部成交，4撤销，5无效订单
	OrderType      field.Int32  // 订单类型1市价单2限价单
	FilledQty      field.String // 成交数量
	UnFilledQty    field.String // 未成交数量
	FilledAvgPrice field.String // 成交均价
	FilledAmount   field.String // 成交金额
	UnFilledAmount field.String // 未成交金额
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (e entrustOrder) Table(newTableName string) *entrustOrder {
	e.entrustOrderDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e entrustOrder) As(alias string) *entrustOrder {
	e.entrustOrderDo.DO = *(e.entrustOrderDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *entrustOrder) updateTableName(table string) *entrustOrder {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.OrderID = field.NewString(table, "order_id")
	e.UserID = field.NewInt32(table, "user_id")
	e.SymbolID = field.NewInt32(table, "symbol_id")
	e.SymbolName = field.NewString(table, "symbol_name")
	e.Qty = field.NewString(table, "qty")
	e.Price = field.NewString(table, "price")
	e.Side = field.NewInt32(table, "side")
	e.Amount = field.NewString(table, "amount")
	e.Status = field.NewInt32(table, "status")
	e.OrderType = field.NewInt32(table, "order_type")
	e.FilledQty = field.NewString(table, "filled_qty")
	e.UnFilledQty = field.NewString(table, "un_filled_qty")
	e.FilledAvgPrice = field.NewString(table, "filled_avg_price")
	e.FilledAmount = field.NewString(table, "filled_amount")
	e.UnFilledAmount = field.NewString(table, "un_filled_amount")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *entrustOrder) WithContext(ctx context.Context) *entrustOrderDo {
	return e.entrustOrderDo.WithContext(ctx)
}

func (e entrustOrder) TableName() string { return e.entrustOrderDo.TableName() }

func (e entrustOrder) Alias() string { return e.entrustOrderDo.Alias() }

func (e entrustOrder) Columns(cols ...field.Expr) gen.Columns {
	return e.entrustOrderDo.Columns(cols...)
}

func (e *entrustOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *entrustOrder) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 18)
	e.fieldMap["id"] = e.ID
	e.fieldMap["order_id"] = e.OrderID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["symbol_id"] = e.SymbolID
	e.fieldMap["symbol_name"] = e.SymbolName
	e.fieldMap["qty"] = e.Qty
	e.fieldMap["price"] = e.Price
	e.fieldMap["side"] = e.Side
	e.fieldMap["amount"] = e.Amount
	e.fieldMap["status"] = e.Status
	e.fieldMap["order_type"] = e.OrderType
	e.fieldMap["filled_qty"] = e.FilledQty
	e.fieldMap["un_filled_qty"] = e.UnFilledQty
	e.fieldMap["filled_avg_price"] = e.FilledAvgPrice
	e.fieldMap["filled_amount"] = e.FilledAmount
	e.fieldMap["un_filled_amount"] = e.UnFilledAmount
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e entrustOrder) clone(db *gorm.DB) entrustOrder {
	e.entrustOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e entrustOrder) replaceDB(db *gorm.DB) entrustOrder {
	e.entrustOrderDo.ReplaceDB(db)
	return e
}

type entrustOrderDo struct{ gen.DO }

func (e entrustOrderDo) Debug() *entrustOrderDo {
	return e.withDO(e.DO.Debug())
}

func (e entrustOrderDo) WithContext(ctx context.Context) *entrustOrderDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e entrustOrderDo) ReadDB() *entrustOrderDo {
	return e.Clauses(dbresolver.Read)
}

func (e entrustOrderDo) WriteDB() *entrustOrderDo {
	return e.Clauses(dbresolver.Write)
}

func (e entrustOrderDo) Session(config *gorm.Session) *entrustOrderDo {
	return e.withDO(e.DO.Session(config))
}

func (e entrustOrderDo) Clauses(conds ...clause.Expression) *entrustOrderDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e entrustOrderDo) Returning(value interface{}, columns ...string) *entrustOrderDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e entrustOrderDo) Not(conds ...gen.Condition) *entrustOrderDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e entrustOrderDo) Or(conds ...gen.Condition) *entrustOrderDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e entrustOrderDo) Select(conds ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e entrustOrderDo) Where(conds ...gen.Condition) *entrustOrderDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e entrustOrderDo) Order(conds ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e entrustOrderDo) Distinct(cols ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e entrustOrderDo) Omit(cols ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e entrustOrderDo) Join(table schema.Tabler, on ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e entrustOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e entrustOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e entrustOrderDo) Group(cols ...field.Expr) *entrustOrderDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e entrustOrderDo) Having(conds ...gen.Condition) *entrustOrderDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e entrustOrderDo) Limit(limit int) *entrustOrderDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e entrustOrderDo) Offset(offset int) *entrustOrderDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e entrustOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *entrustOrderDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e entrustOrderDo) Unscoped() *entrustOrderDo {
	return e.withDO(e.DO.Unscoped())
}

func (e entrustOrderDo) Create(values ...*model.EntrustOrder) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e entrustOrderDo) CreateInBatches(values []*model.EntrustOrder, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e entrustOrderDo) Save(values ...*model.EntrustOrder) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e entrustOrderDo) First() (*model.EntrustOrder, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EntrustOrder), nil
	}
}

func (e entrustOrderDo) Take() (*model.EntrustOrder, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EntrustOrder), nil
	}
}

func (e entrustOrderDo) Last() (*model.EntrustOrder, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EntrustOrder), nil
	}
}

func (e entrustOrderDo) Find() ([]*model.EntrustOrder, error) {
	result, err := e.DO.Find()
	return result.([]*model.EntrustOrder), err
}

func (e entrustOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EntrustOrder, err error) {
	buf := make([]*model.EntrustOrder, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e entrustOrderDo) FindInBatches(result *[]*model.EntrustOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e entrustOrderDo) Attrs(attrs ...field.AssignExpr) *entrustOrderDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e entrustOrderDo) Assign(attrs ...field.AssignExpr) *entrustOrderDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e entrustOrderDo) Joins(fields ...field.RelationField) *entrustOrderDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e entrustOrderDo) Preload(fields ...field.RelationField) *entrustOrderDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e entrustOrderDo) FirstOrInit() (*model.EntrustOrder, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EntrustOrder), nil
	}
}

func (e entrustOrderDo) FirstOrCreate() (*model.EntrustOrder, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EntrustOrder), nil
	}
}

func (e entrustOrderDo) FindByPage(offset int, limit int) (result []*model.EntrustOrder, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e entrustOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e entrustOrderDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e entrustOrderDo) Delete(models ...*model.EntrustOrder) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *entrustOrderDo) withDO(do gen.Dao) *entrustOrderDo {
	e.DO = *do.(*gen.DO)
	return e
}
