// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newT1(db *gorm.DB, opts ...gen.DOOption) t1 {
	_t1 := t1{}

	_t1.t1Do.UseDB(db, opts...)
	_t1.t1Do.UseModel(&model.T1{})

	tableName := _t1.t1Do.TableName()
	_t1.ALL = field.NewAsterisk(tableName)
	_t1.ID = field.NewInt32(tableName, "id")
	_t1.Name = field.NewString(tableName, "name")
	_t1.Age = field.NewInt32(tableName, "age")

	_t1.fillFieldMap()

	return _t1
}

type t1 struct {
	t1Do t1Do

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String
	Age  field.Int32

	fieldMap map[string]field.Expr
}

func (t t1) Table(newTableName string) *t1 {
	t.t1Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t t1) As(alias string) *t1 {
	t.t1Do.DO = *(t.t1Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *t1) updateTableName(table string) *t1 {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Age = field.NewInt32(table, "age")

	t.fillFieldMap()

	return t
}

func (t *t1) WithContext(ctx context.Context) *t1Do { return t.t1Do.WithContext(ctx) }

func (t t1) TableName() string { return t.t1Do.TableName() }

func (t t1) Alias() string { return t.t1Do.Alias() }

func (t t1) Columns(cols ...field.Expr) gen.Columns { return t.t1Do.Columns(cols...) }

func (t *t1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *t1) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["age"] = t.Age
}

func (t t1) clone(db *gorm.DB) t1 {
	t.t1Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t t1) replaceDB(db *gorm.DB) t1 {
	t.t1Do.ReplaceDB(db)
	return t
}

type t1Do struct{ gen.DO }

func (t t1Do) Debug() *t1Do {
	return t.withDO(t.DO.Debug())
}

func (t t1Do) WithContext(ctx context.Context) *t1Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t t1Do) ReadDB() *t1Do {
	return t.Clauses(dbresolver.Read)
}

func (t t1Do) WriteDB() *t1Do {
	return t.Clauses(dbresolver.Write)
}

func (t t1Do) Session(config *gorm.Session) *t1Do {
	return t.withDO(t.DO.Session(config))
}

func (t t1Do) Clauses(conds ...clause.Expression) *t1Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t t1Do) Returning(value interface{}, columns ...string) *t1Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t t1Do) Not(conds ...gen.Condition) *t1Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t t1Do) Or(conds ...gen.Condition) *t1Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t t1Do) Select(conds ...field.Expr) *t1Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t t1Do) Where(conds ...gen.Condition) *t1Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t t1Do) Order(conds ...field.Expr) *t1Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t t1Do) Distinct(cols ...field.Expr) *t1Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t t1Do) Omit(cols ...field.Expr) *t1Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t t1Do) Join(table schema.Tabler, on ...field.Expr) *t1Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t t1Do) LeftJoin(table schema.Tabler, on ...field.Expr) *t1Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t t1Do) RightJoin(table schema.Tabler, on ...field.Expr) *t1Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t t1Do) Group(cols ...field.Expr) *t1Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t t1Do) Having(conds ...gen.Condition) *t1Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t t1Do) Limit(limit int) *t1Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t t1Do) Offset(offset int) *t1Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t t1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *t1Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t t1Do) Unscoped() *t1Do {
	return t.withDO(t.DO.Unscoped())
}

func (t t1Do) Create(values ...*model.T1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t t1Do) CreateInBatches(values []*model.T1, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t t1Do) Save(values ...*model.T1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t t1Do) First() (*model.T1, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.T1), nil
	}
}

func (t t1Do) Take() (*model.T1, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.T1), nil
	}
}

func (t t1Do) Last() (*model.T1, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.T1), nil
	}
}

func (t t1Do) Find() ([]*model.T1, error) {
	result, err := t.DO.Find()
	return result.([]*model.T1), err
}

func (t t1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.T1, err error) {
	buf := make([]*model.T1, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t t1Do) FindInBatches(result *[]*model.T1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t t1Do) Attrs(attrs ...field.AssignExpr) *t1Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t t1Do) Assign(attrs ...field.AssignExpr) *t1Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t t1Do) Joins(fields ...field.RelationField) *t1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t t1Do) Preload(fields ...field.RelationField) *t1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t t1Do) FirstOrInit() (*model.T1, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.T1), nil
	}
}

func (t t1Do) FirstOrCreate() (*model.T1, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.T1), nil
	}
}

func (t t1Do) FindByPage(offset int, limit int) (result []*model.T1, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t t1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t t1Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t t1Do) Delete(models ...*model.T1) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *t1Do) withDO(do gen.Dao) *t1Do {
	t.DO = *do.(*gen.DO)
	return t
}
