// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newDomin(db *gorm.DB, opts ...gen.DOOption) domin {
	_domin := domin{}

	_domin.dominDo.UseDB(db, opts...)
	_domin.dominDo.UseModel(&model.Domin{})

	tableName := _domin.dominDo.TableName()
	_domin.ALL = field.NewAsterisk(tableName)
	_domin.ID = field.NewInt64(tableName, "id")
	_domin.DomainName = field.NewString(tableName, "domain_name")
	_domin.Remark = field.NewString(tableName, "remark")
	_domin.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_domin.CreatedAt = field.NewInt64(tableName, "created_at")
	_domin.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_domin.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_domin.fillFieldMap()

	return _domin
}

type domin struct {
	dominDo dominDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	DomainName field.String // 域名
	Remark     field.String // 备注
	UpdatedBy  field.Int64  // 最后修改人id
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Int64  // 删除时间

	fieldMap map[string]field.Expr
}

func (d domin) Table(newTableName string) *domin {
	d.dominDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domin) As(alias string) *domin {
	d.dominDo.DO = *(d.dominDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domin) updateTableName(table string) *domin {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.DomainName = field.NewString(table, "domain_name")
	d.Remark = field.NewString(table, "remark")
	d.UpdatedBy = field.NewInt64(table, "updated_by")
	d.CreatedAt = field.NewInt64(table, "created_at")
	d.UpdatedAt = field.NewInt64(table, "updated_at")
	d.DeletedAt = field.NewInt64(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *domin) WithContext(ctx context.Context) *dominDo { return d.dominDo.WithContext(ctx) }

func (d domin) TableName() string { return d.dominDo.TableName() }

func (d domin) Alias() string { return d.dominDo.Alias() }

func (d domin) Columns(cols ...field.Expr) gen.Columns { return d.dominDo.Columns(cols...) }

func (d *domin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domin) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["domain_name"] = d.DomainName
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d domin) clone(db *gorm.DB) domin {
	d.dominDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domin) replaceDB(db *gorm.DB) domin {
	d.dominDo.ReplaceDB(db)
	return d
}

type dominDo struct{ gen.DO }

func (d dominDo) Debug() *dominDo {
	return d.withDO(d.DO.Debug())
}

func (d dominDo) WithContext(ctx context.Context) *dominDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dominDo) ReadDB() *dominDo {
	return d.Clauses(dbresolver.Read)
}

func (d dominDo) WriteDB() *dominDo {
	return d.Clauses(dbresolver.Write)
}

func (d dominDo) Session(config *gorm.Session) *dominDo {
	return d.withDO(d.DO.Session(config))
}

func (d dominDo) Clauses(conds ...clause.Expression) *dominDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dominDo) Returning(value interface{}, columns ...string) *dominDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dominDo) Not(conds ...gen.Condition) *dominDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dominDo) Or(conds ...gen.Condition) *dominDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dominDo) Select(conds ...field.Expr) *dominDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dominDo) Where(conds ...gen.Condition) *dominDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dominDo) Order(conds ...field.Expr) *dominDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dominDo) Distinct(cols ...field.Expr) *dominDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dominDo) Omit(cols ...field.Expr) *dominDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dominDo) Join(table schema.Tabler, on ...field.Expr) *dominDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dominDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dominDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dominDo) RightJoin(table schema.Tabler, on ...field.Expr) *dominDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dominDo) Group(cols ...field.Expr) *dominDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dominDo) Having(conds ...gen.Condition) *dominDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dominDo) Limit(limit int) *dominDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dominDo) Offset(offset int) *dominDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dominDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dominDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dominDo) Unscoped() *dominDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dominDo) Create(values ...*model.Domin) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dominDo) CreateInBatches(values []*model.Domin, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dominDo) Save(values ...*model.Domin) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dominDo) First() (*model.Domin, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domin), nil
	}
}

func (d dominDo) Take() (*model.Domin, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domin), nil
	}
}

func (d dominDo) Last() (*model.Domin, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domin), nil
	}
}

func (d dominDo) Find() ([]*model.Domin, error) {
	result, err := d.DO.Find()
	return result.([]*model.Domin), err
}

func (d dominDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Domin, err error) {
	buf := make([]*model.Domin, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dominDo) FindInBatches(result *[]*model.Domin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dominDo) Attrs(attrs ...field.AssignExpr) *dominDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dominDo) Assign(attrs ...field.AssignExpr) *dominDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dominDo) Joins(fields ...field.RelationField) *dominDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dominDo) Preload(fields ...field.RelationField) *dominDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dominDo) FirstOrInit() (*model.Domin, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domin), nil
	}
}

func (d dominDo) FirstOrCreate() (*model.Domin, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Domin), nil
	}
}

func (d dominDo) FindByPage(offset int, limit int) (result []*model.Domin, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dominDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dominDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dominDo) Delete(models ...*model.Domin) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dominDo) withDO(do gen.Dao) *dominDo {
	d.DO = *do.(*gen.DO)
	return d
}
