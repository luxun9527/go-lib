// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newUserBak(db *gorm.DB, opts ...gen.DOOption) userBak {
	_userBak := userBak{}

	_userBak.userBakDo.UseDB(db, opts...)
	_userBak.userBakDo.UseModel(&model.UserBak{})

	tableName := _userBak.userBakDo.TableName()
	_userBak.ALL = field.NewAsterisk(tableName)
	_userBak.ID = field.NewInt32(tableName, "id")
	_userBak.Username = field.NewString(tableName, "username")
	_userBak.Age = field.NewInt32(tableName, "age")
	_userBak.Fav = field.NewString(tableName, "fav")
	_userBak.CreatedAt = field.NewInt64(tableName, "created_at")
	_userBak.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userBak.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_userBak.fillFieldMap()

	return _userBak
}

type userBak struct {
	userBakDo userBakDo

	ALL       field.Asterisk
	ID        field.Int32
	Username  field.String // 用户名
	Age       field.Int32  // 年龄
	Fav       field.String // 爱好
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Int64  // 删除时间

	fieldMap map[string]field.Expr
}

func (u userBak) Table(newTableName string) *userBak {
	u.userBakDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBak) As(alias string) *userBak {
	u.userBakDo.DO = *(u.userBakDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBak) updateTableName(table string) *userBak {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Username = field.NewString(table, "username")
	u.Age = field.NewInt32(table, "age")
	u.Fav = field.NewString(table, "fav")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewInt64(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userBak) WithContext(ctx context.Context) *userBakDo { return u.userBakDo.WithContext(ctx) }

func (u userBak) TableName() string { return u.userBakDo.TableName() }

func (u userBak) Alias() string { return u.userBakDo.Alias() }

func (u userBak) Columns(cols ...field.Expr) gen.Columns { return u.userBakDo.Columns(cols...) }

func (u *userBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBak) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["age"] = u.Age
	u.fieldMap["fav"] = u.Fav
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userBak) clone(db *gorm.DB) userBak {
	u.userBakDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBak) replaceDB(db *gorm.DB) userBak {
	u.userBakDo.ReplaceDB(db)
	return u
}

type userBakDo struct{ gen.DO }

func (u userBakDo) Debug() *userBakDo {
	return u.withDO(u.DO.Debug())
}

func (u userBakDo) WithContext(ctx context.Context) *userBakDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBakDo) ReadDB() *userBakDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBakDo) WriteDB() *userBakDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBakDo) Session(config *gorm.Session) *userBakDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBakDo) Clauses(conds ...clause.Expression) *userBakDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBakDo) Returning(value interface{}, columns ...string) *userBakDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBakDo) Not(conds ...gen.Condition) *userBakDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBakDo) Or(conds ...gen.Condition) *userBakDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBakDo) Select(conds ...field.Expr) *userBakDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBakDo) Where(conds ...gen.Condition) *userBakDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBakDo) Order(conds ...field.Expr) *userBakDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBakDo) Distinct(cols ...field.Expr) *userBakDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBakDo) Omit(cols ...field.Expr) *userBakDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBakDo) Join(table schema.Tabler, on ...field.Expr) *userBakDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userBakDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBakDo) RightJoin(table schema.Tabler, on ...field.Expr) *userBakDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBakDo) Group(cols ...field.Expr) *userBakDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBakDo) Having(conds ...gen.Condition) *userBakDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBakDo) Limit(limit int) *userBakDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBakDo) Offset(offset int) *userBakDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userBakDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBakDo) Unscoped() *userBakDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBakDo) Create(values ...*model.UserBak) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBakDo) CreateInBatches(values []*model.UserBak, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBakDo) Save(values ...*model.UserBak) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBakDo) First() (*model.UserBak, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBak), nil
	}
}

func (u userBakDo) Take() (*model.UserBak, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBak), nil
	}
}

func (u userBakDo) Last() (*model.UserBak, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBak), nil
	}
}

func (u userBakDo) Find() ([]*model.UserBak, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBak), err
}

func (u userBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBak, err error) {
	buf := make([]*model.UserBak, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBakDo) FindInBatches(result *[]*model.UserBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBakDo) Attrs(attrs ...field.AssignExpr) *userBakDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBakDo) Assign(attrs ...field.AssignExpr) *userBakDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBakDo) Joins(fields ...field.RelationField) *userBakDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBakDo) Preload(fields ...field.RelationField) *userBakDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBakDo) FirstOrInit() (*model.UserBak, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBak), nil
	}
}

func (u userBakDo) FirstOrCreate() (*model.UserBak, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBak), nil
	}
}

func (u userBakDo) FindByPage(offset int, limit int) (result []*model.UserBak, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBakDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBakDo) Delete(models ...*model.UserBak) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBakDo) withDO(do gen.Dao) *userBakDo {
	u.DO = *do.(*gen.DO)
	return u
}
