// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Asset:        newAsset(db, opts...),
		Card:         newCard(db, opts...),
		CustomField:  newCustomField(db, opts...),
		Domin:        newDomin(db, opts...),
		EntrustOrder: newEntrustOrder(db, opts...),
		Kline:        newKline(db, opts...),
		MatchedOrder: newMatchedOrder(db, opts...),
		Profile:      newProfile(db, opts...),
		T:            newT(db, opts...),
		T1:           newT1(db, opts...),
		Test:         newTest(db, opts...),
		User:         newUser(db, opts...),
		UserBak:      newUserBak(db, opts...),
		UserJSON:     newUserJSON(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Asset        asset
	Card         card
	CustomField  customField
	Domin        domin
	EntrustOrder entrustOrder
	Kline        kline
	MatchedOrder matchedOrder
	Profile      profile
	T            t
	T1           t1
	Test         test
	User         user
	UserBak      userBak
	UserJSON     userJSON
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Asset:        q.Asset.clone(db),
		Card:         q.Card.clone(db),
		CustomField:  q.CustomField.clone(db),
		Domin:        q.Domin.clone(db),
		EntrustOrder: q.EntrustOrder.clone(db),
		Kline:        q.Kline.clone(db),
		MatchedOrder: q.MatchedOrder.clone(db),
		Profile:      q.Profile.clone(db),
		T:            q.T.clone(db),
		T1:           q.T1.clone(db),
		Test:         q.Test.clone(db),
		User:         q.User.clone(db),
		UserBak:      q.UserBak.clone(db),
		UserJSON:     q.UserJSON.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Asset:        q.Asset.replaceDB(db),
		Card:         q.Card.replaceDB(db),
		CustomField:  q.CustomField.replaceDB(db),
		Domin:        q.Domin.replaceDB(db),
		EntrustOrder: q.EntrustOrder.replaceDB(db),
		Kline:        q.Kline.replaceDB(db),
		MatchedOrder: q.MatchedOrder.replaceDB(db),
		Profile:      q.Profile.replaceDB(db),
		T:            q.T.replaceDB(db),
		T1:           q.T1.replaceDB(db),
		Test:         q.Test.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserBak:      q.UserBak.replaceDB(db),
		UserJSON:     q.UserJSON.replaceDB(db),
	}
}

type queryCtx struct {
	Asset        *assetDo
	Card         *cardDo
	CustomField  *customFieldDo
	Domin        *dominDo
	EntrustOrder *entrustOrderDo
	Kline        *klineDo
	MatchedOrder *matchedOrderDo
	Profile      *profileDo
	T            *tDo
	T1           *t1Do
	Test         *testDo
	User         *userDo
	UserBak      *userBakDo
	UserJSON     *userJSONDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Asset:        q.Asset.WithContext(ctx),
		Card:         q.Card.WithContext(ctx),
		CustomField:  q.CustomField.WithContext(ctx),
		Domin:        q.Domin.WithContext(ctx),
		EntrustOrder: q.EntrustOrder.WithContext(ctx),
		Kline:        q.Kline.WithContext(ctx),
		MatchedOrder: q.MatchedOrder.WithContext(ctx),
		Profile:      q.Profile.WithContext(ctx),
		T:            q.T.WithContext(ctx),
		T1:           q.T1.WithContext(ctx),
		Test:         q.Test.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserBak:      q.UserBak.WithContext(ctx),
		UserJSON:     q.UserJSON.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
