// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-lib/sdk/gorm/gen/dao/model"
)

func newUserJSON(db *gorm.DB, opts ...gen.DOOption) userJSON {
	_userJSON := userJSON{}

	_userJSON.userJSONDo.UseDB(db, opts...)
	_userJSON.userJSONDo.UseModel(&model.UserJSON{})

	tableName := _userJSON.userJSONDo.TableName()
	_userJSON.ALL = field.NewAsterisk(tableName)
	_userJSON.ID = field.NewInt32(tableName, "id")
	_userJSON.UserConfig = field.NewString(tableName, "user_config")

	_userJSON.fillFieldMap()

	return _userJSON
}

type userJSON struct {
	userJSONDo userJSONDo

	ALL        field.Asterisk
	ID         field.Int32
	UserConfig field.String

	fieldMap map[string]field.Expr
}

func (u userJSON) Table(newTableName string) *userJSON {
	u.userJSONDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userJSON) As(alias string) *userJSON {
	u.userJSONDo.DO = *(u.userJSONDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userJSON) updateTableName(table string) *userJSON {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserConfig = field.NewString(table, "user_config")

	u.fillFieldMap()

	return u
}

func (u *userJSON) WithContext(ctx context.Context) *userJSONDo { return u.userJSONDo.WithContext(ctx) }

func (u userJSON) TableName() string { return u.userJSONDo.TableName() }

func (u userJSON) Alias() string { return u.userJSONDo.Alias() }

func (u userJSON) Columns(cols ...field.Expr) gen.Columns { return u.userJSONDo.Columns(cols...) }

func (u *userJSON) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userJSON) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_config"] = u.UserConfig
}

func (u userJSON) clone(db *gorm.DB) userJSON {
	u.userJSONDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userJSON) replaceDB(db *gorm.DB) userJSON {
	u.userJSONDo.ReplaceDB(db)
	return u
}

type userJSONDo struct{ gen.DO }

func (u userJSONDo) Debug() *userJSONDo {
	return u.withDO(u.DO.Debug())
}

func (u userJSONDo) WithContext(ctx context.Context) *userJSONDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userJSONDo) ReadDB() *userJSONDo {
	return u.Clauses(dbresolver.Read)
}

func (u userJSONDo) WriteDB() *userJSONDo {
	return u.Clauses(dbresolver.Write)
}

func (u userJSONDo) Session(config *gorm.Session) *userJSONDo {
	return u.withDO(u.DO.Session(config))
}

func (u userJSONDo) Clauses(conds ...clause.Expression) *userJSONDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userJSONDo) Returning(value interface{}, columns ...string) *userJSONDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userJSONDo) Not(conds ...gen.Condition) *userJSONDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userJSONDo) Or(conds ...gen.Condition) *userJSONDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userJSONDo) Select(conds ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userJSONDo) Where(conds ...gen.Condition) *userJSONDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userJSONDo) Order(conds ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userJSONDo) Distinct(cols ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userJSONDo) Omit(cols ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userJSONDo) Join(table schema.Tabler, on ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userJSONDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userJSONDo) RightJoin(table schema.Tabler, on ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userJSONDo) Group(cols ...field.Expr) *userJSONDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userJSONDo) Having(conds ...gen.Condition) *userJSONDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userJSONDo) Limit(limit int) *userJSONDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userJSONDo) Offset(offset int) *userJSONDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userJSONDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userJSONDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userJSONDo) Unscoped() *userJSONDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userJSONDo) Create(values ...*model.UserJSON) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userJSONDo) CreateInBatches(values []*model.UserJSON, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userJSONDo) Save(values ...*model.UserJSON) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userJSONDo) First() (*model.UserJSON, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJSON), nil
	}
}

func (u userJSONDo) Take() (*model.UserJSON, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJSON), nil
	}
}

func (u userJSONDo) Last() (*model.UserJSON, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJSON), nil
	}
}

func (u userJSONDo) Find() ([]*model.UserJSON, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserJSON), err
}

func (u userJSONDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserJSON, err error) {
	buf := make([]*model.UserJSON, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userJSONDo) FindInBatches(result *[]*model.UserJSON, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userJSONDo) Attrs(attrs ...field.AssignExpr) *userJSONDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userJSONDo) Assign(attrs ...field.AssignExpr) *userJSONDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userJSONDo) Joins(fields ...field.RelationField) *userJSONDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userJSONDo) Preload(fields ...field.RelationField) *userJSONDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userJSONDo) FirstOrInit() (*model.UserJSON, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJSON), nil
	}
}

func (u userJSONDo) FirstOrCreate() (*model.UserJSON, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserJSON), nil
	}
}

func (u userJSONDo) FindByPage(offset int, limit int) (result []*model.UserJSON, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userJSONDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userJSONDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userJSONDo) Delete(models ...*model.UserJSON) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userJSONDo) withDO(do gen.Dao) *userJSONDo {
	u.DO = *do.(*gen.DO)
	return u
}
