swagger: "2.0"
info:
  title: |-
    当别人导入这个protobuf文件，使用的包名 如 google/protobuf/empty.proto 定义的就是 package google.protobuf,我们要使用这个文件中message 使用方法为 package.Message
    如google.protobuf.Empty
  version: version not set
tags:
  - name: GrpcDemo
  - name: GrpcGatewayDemo
consumes:
  - application/json
produces:
  - application/json
paths:
  /grpcdemo.GrpcDemo/DemoImport:
    post:
      summary: Unary RPC 当导入其他protobuf怎么使用
      operationId: GrpcDemo_DemoImport
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/grpcdemoCustomMessage'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/folderImportedMessage'
      tags:
        - GrpcDemo
  /grpcdemo.GrpcDemo/Exchange:
    post:
      summary: Bidirectional Streaming RPC （双向流式RPC）
      operationId: GrpcDemo_Exchange
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/grpcdemoExchangeResp'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of grpcdemoExchangeResp
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/grpcdemoExchangeReq'
      tags:
        - GrpcDemo
  /grpcdemo.GrpcDemo/FetchData:
    post:
      summary: Server Streaming RPC （ 服务器流式RPC）
      operationId: GrpcDemo_FetchData
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/grpcdemoFetchDataResp'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of grpcdemoFetchDataResp
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/grpcdemoFetchDataReq'
      tags:
        - GrpcDemo
  /grpcdemo.GrpcDemo/PushData:
    post:
      summary: Client Streaming RPC （ 客户端流式RPC）
      operationId: GrpcDemo_PushData
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/grpcdemoPushDataResp'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          description: ' (streaming inputs)'
          in: body
          required: true
          schema:
            $ref: '#/definitions/grpcdemoPushDataReq'
      tags:
        - GrpcDemo
  /grpcdemo.GrpcDemo/UnaryCall:
    post:
      summary: Unary RPC （一元RPC）
      operationId: GrpcDemo_UnaryCall
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/grpcdemoUnaryCallResp'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties: {}
      tags:
        - GrpcDemo
  /v1/call:
    post:
      summary: grpc-gateway调用
      operationId: GrpcDemo_CallGrpcGateway
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/grpcdemoCallGrpcGatewayResp'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/grpcdemoCallGrpcGatewayReq'
      tags:
        - GrpcDemo
  /v1/gateway:
    post:
      operationId: GrpcGatewayDemo_CallGrpcGatewayDemo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/grpcdemoCallGrpcGatewayDemoResp'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/grpcdemoCallGrpcGatewayDemoReq'
      tags:
        - GrpcGatewayDemo
definitions:
  folderImportedMessage:
    type: object
    properties:
      imported_message:
        type: string
  grpcdemoCallGrpcGatewayDemoReq:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      data:
        $ref: '#/definitions/protobufAny'
  grpcdemoCallGrpcGatewayDemoResp:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      data:
        $ref: '#/definitions/protobufAny'
  grpcdemoCallGrpcGatewayReq:
    type: object
    properties:
      config:
        type: object
        additionalProperties:
          type: string
    title: map类型
  grpcdemoCallGrpcGatewayResp:
    type: object
    properties:
      config:
        type: object
        additionalProperties:
          type: string
  grpcdemoCustomMessage:
    type: object
    properties:
      custom_message:
        type: string
  grpcdemoExchangeReq:
    type: object
    properties:
      first_name:
        type: string
      age:
        type: string
  grpcdemoExchangeResp:
    type: object
    properties:
      last_name:
        type: string
      gender:
        $ref: '#/definitions/grpcdemoGender'
  grpcdemoFetchDataReq:
    type: object
    properties:
      msg:
        type: string
      email:
        type: string
      phone:
        type: string
    title: protobuf oneof的用法。
  grpcdemoFetchDataResp:
    type: object
    properties:
      fav_book:
        type: string
        title: 最爱的书
  grpcdemoGender:
    type: string
    enum:
      - Unknown
      - Male
      - Female
    default: Unknown
    title: 枚举类
  grpcdemoPushDataReq:
    type: object
    properties:
      foo:
        type: string
  grpcdemoPushDataResp:
    type: object
    properties:
      foo:
        type: string
  grpcdemoUnaryCallResp:
    type: object
    properties:
      username:
        type: string
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
