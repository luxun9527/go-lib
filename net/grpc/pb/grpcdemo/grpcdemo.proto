syntax = "proto3";
//当别人导入这个protobuf文件，使用的包名 如 google/protobuf/empty.proto 定义的就是 package google.protobuf,我们要使用这个文件中message 使用方法为 package.Message
//如google.protobuf.Empty
package grpcdemo;

//go_package = "./grpcdemo;grpcdemo"; ./grpcdemo表示生成的文件的位置和生成命令指定的生成位置,一起决定最后生成文件的位置。       grpcdemo表示生成的包名
option go_package = "./grpcdemo;grpcdemo";


//导入其他protobuf 导入我们自定义的protobuf 需要和protoc 命令 -I参数组成完整的导入路径。例如，导入google/protobuf/empty.proto需要指定 -I./pb/googleapis
import "google/protobuf/empty.proto";

//导入我们自定义的protobuf 需要和	protoc -I参数组成完整的导入路径。
import "grpcdemo/folder/imported.proto";

//特殊情况当被导入的proto和我们是同一级的时候。可以不使用package.Message的形式 直接使用即可，CustomMessage
import "grpcdemo/custom.proto";

import "google/api/annotations.proto";

service GrpcDemo {
    //grpc 4种调用类型

    //Unary RPC （一元RPC）
    rpc UnaryCall(google.protobuf.Empty)returns(UnaryCallResp);

    //Unary RPC 当导入其他protobuf怎么使用
    rpc DemoImport(grpcdemo.folder.ImportedMessage)returns(CustomMessage);

    //Client Streaming RPC （ 客户端流式RPC）
    rpc PushData(stream PushDataReq) returns(PushDataResp);

    //Server Streaming RPC （ 服务器流式RPC）
    rpc FetchData(FetchDataReq) returns(stream FetchDataResp);

    //Bidirectional Streaming RPC （双向流式RPC）
    rpc Exchange(stream ExchangeReq) returns(stream ExchangeResp);
    //grpc-gateway调用
    rpc CallGrpcGateway(CallGrpcGatewayReq)returns(CallGrpcGatewayResp){
        option (google.api.http) = {
            post: "/v1/call"
            body:"*"
        };
    }
}
message UnaryCallResp{
    string username=1;
}

message PushDataReq{
    string foo=1;
}
message PushDataResp{
    string foo=1;
}

message ExchangeReq{
    string first_name =1;
    optional string age=2;

}
message ExchangeResp{
    string last_name=1;
    Gender gender=2;
}
//枚举类
enum Gender{
    Unknown =0;
    Male=1;
    Female=2;
}
//map类型
message CallGrpcGatewayReq{
    map<string,string> config=1;
}
message CallGrpcGatewayResp{

    map<string,string> config=1;
}

// protobuf oneof的用法。
message FetchDataReq{
    string msg = 1;
    oneof notice_way{
        string email = 2;
        string phone = 3;
    }
}

message FetchDataResp{
    string fav_book=4;//最爱的书
}



/*
 一个pb文件可以定义多个service
*/
service GrpcGatewayDemo {
    rpc CallGrpcGatewayDemo(CallGrpcGatewayDemoReq)returns(CallGrpcGatewayDemoResp){
        option (google.api.http) = {
            post: "/v1/gateway"
            body:"*"
        };
    }
}
message CallGrpcGatewayDemoReq{
    string username=1;
    string password=2;
}
message CallGrpcGatewayDemoResp{
    string username=1;
    string password=2;
}