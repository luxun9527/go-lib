// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: grpcdemo/grpcdemo.proto

//当别人导入这个protobuf文件，使用的包名 如 google/protobuf/empty.proto 定义的就是 package google.protobuf,我们要使用这个文件中message 使用方法为 package.Message
//如google.protobuf.Empty

package grpcdemo

import (
	context "context"
	folder "go-lib/net/grpc/pb/grpcdemo/folder"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcDemo_UnaryCall_FullMethodName       = "/grpcdemo.GrpcDemo/UnaryCall"
	GrpcDemo_DemoImport_FullMethodName      = "/grpcdemo.GrpcDemo/DemoImport"
	GrpcDemo_PushData_FullMethodName        = "/grpcdemo.GrpcDemo/PushData"
	GrpcDemo_FetchData_FullMethodName       = "/grpcdemo.GrpcDemo/FetchData"
	GrpcDemo_Exchange_FullMethodName        = "/grpcdemo.GrpcDemo/Exchange"
	GrpcDemo_CallGrpcGateway_FullMethodName = "/grpcdemo.GrpcDemo/CallGrpcGateway"
)

// GrpcDemoClient is the client API for GrpcDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcDemoClient interface {
	// Unary RPC （一元RPC）
	UnaryCall(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnaryCallResp, error)
	// Unary RPC 当导入其他protobuf怎么使用
	DemoImport(ctx context.Context, in *folder.ImportedMessage, opts ...grpc.CallOption) (*CustomMessage, error)
	// Client Streaming RPC （ 客户端流式RPC）
	PushData(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_PushDataClient, error)
	// Server Streaming RPC （ 服务器流式RPC）
	FetchData(ctx context.Context, in *FetchDataReq, opts ...grpc.CallOption) (GrpcDemo_FetchDataClient, error)
	// Bidirectional Streaming RPC （双向流式RPC）
	Exchange(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_ExchangeClient, error)
	// grpc-gateway调用
	CallGrpcGateway(ctx context.Context, in *CallGrpcGatewayReq, opts ...grpc.CallOption) (*CallGrpcGatewayResp, error)
}

type grpcDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcDemoClient(cc grpc.ClientConnInterface) GrpcDemoClient {
	return &grpcDemoClient{cc}
}

func (c *grpcDemoClient) UnaryCall(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnaryCallResp, error) {
	out := new(UnaryCallResp)
	err := c.cc.Invoke(ctx, GrpcDemo_UnaryCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) DemoImport(ctx context.Context, in *folder.ImportedMessage, opts ...grpc.CallOption) (*CustomMessage, error) {
	out := new(CustomMessage)
	err := c.cc.Invoke(ctx, GrpcDemo_DemoImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcDemoClient) PushData(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_PushDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcDemo_ServiceDesc.Streams[0], GrpcDemo_PushData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcDemoPushDataClient{stream}
	return x, nil
}

type GrpcDemo_PushDataClient interface {
	Send(*PushDataReq) error
	CloseAndRecv() (*PushDataResp, error)
	grpc.ClientStream
}

type grpcDemoPushDataClient struct {
	grpc.ClientStream
}

func (x *grpcDemoPushDataClient) Send(m *PushDataReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcDemoPushDataClient) CloseAndRecv() (*PushDataResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushDataResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcDemoClient) FetchData(ctx context.Context, in *FetchDataReq, opts ...grpc.CallOption) (GrpcDemo_FetchDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcDemo_ServiceDesc.Streams[1], GrpcDemo_FetchData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcDemoFetchDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcDemo_FetchDataClient interface {
	Recv() (*FetchDataResp, error)
	grpc.ClientStream
}

type grpcDemoFetchDataClient struct {
	grpc.ClientStream
}

func (x *grpcDemoFetchDataClient) Recv() (*FetchDataResp, error) {
	m := new(FetchDataResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcDemoClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (GrpcDemo_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcDemo_ServiceDesc.Streams[2], GrpcDemo_Exchange_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcDemoExchangeClient{stream}
	return x, nil
}

type GrpcDemo_ExchangeClient interface {
	Send(*ExchangeReq) error
	Recv() (*ExchangeResp, error)
	grpc.ClientStream
}

type grpcDemoExchangeClient struct {
	grpc.ClientStream
}

func (x *grpcDemoExchangeClient) Send(m *ExchangeReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcDemoExchangeClient) Recv() (*ExchangeResp, error) {
	m := new(ExchangeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcDemoClient) CallGrpcGateway(ctx context.Context, in *CallGrpcGatewayReq, opts ...grpc.CallOption) (*CallGrpcGatewayResp, error) {
	out := new(CallGrpcGatewayResp)
	err := c.cc.Invoke(ctx, GrpcDemo_CallGrpcGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcDemoServer is the server API for GrpcDemo service.
// All implementations must embed UnimplementedGrpcDemoServer
// for forward compatibility
type GrpcDemoServer interface {
	// Unary RPC （一元RPC）
	UnaryCall(context.Context, *emptypb.Empty) (*UnaryCallResp, error)
	// Unary RPC 当导入其他protobuf怎么使用
	DemoImport(context.Context, *folder.ImportedMessage) (*CustomMessage, error)
	// Client Streaming RPC （ 客户端流式RPC）
	PushData(GrpcDemo_PushDataServer) error
	// Server Streaming RPC （ 服务器流式RPC）
	FetchData(*FetchDataReq, GrpcDemo_FetchDataServer) error
	// Bidirectional Streaming RPC （双向流式RPC）
	Exchange(GrpcDemo_ExchangeServer) error
	// grpc-gateway调用
	CallGrpcGateway(context.Context, *CallGrpcGatewayReq) (*CallGrpcGatewayResp, error)
	mustEmbedUnimplementedGrpcDemoServer()
}

// UnimplementedGrpcDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcDemoServer struct {
}

func (UnimplementedGrpcDemoServer) UnaryCall(context.Context, *emptypb.Empty) (*UnaryCallResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedGrpcDemoServer) DemoImport(context.Context, *folder.ImportedMessage) (*CustomMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoImport not implemented")
}
func (UnimplementedGrpcDemoServer) PushData(GrpcDemo_PushDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (UnimplementedGrpcDemoServer) FetchData(*FetchDataReq, GrpcDemo_FetchDataServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchData not implemented")
}
func (UnimplementedGrpcDemoServer) Exchange(GrpcDemo_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedGrpcDemoServer) CallGrpcGateway(context.Context, *CallGrpcGatewayReq) (*CallGrpcGatewayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallGrpcGateway not implemented")
}
func (UnimplementedGrpcDemoServer) mustEmbedUnimplementedGrpcDemoServer() {}

// UnsafeGrpcDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcDemoServer will
// result in compilation errors.
type UnsafeGrpcDemoServer interface {
	mustEmbedUnimplementedGrpcDemoServer()
}

func RegisterGrpcDemoServer(s grpc.ServiceRegistrar, srv GrpcDemoServer) {
	s.RegisterService(&GrpcDemo_ServiceDesc, srv)
}

func _GrpcDemo_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcDemo_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).UnaryCall(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_DemoImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(folder.ImportedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).DemoImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcDemo_DemoImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).DemoImport(ctx, req.(*folder.ImportedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcDemo_PushData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcDemoServer).PushData(&grpcDemoPushDataServer{stream})
}

type GrpcDemo_PushDataServer interface {
	SendAndClose(*PushDataResp) error
	Recv() (*PushDataReq, error)
	grpc.ServerStream
}

type grpcDemoPushDataServer struct {
	grpc.ServerStream
}

func (x *grpcDemoPushDataServer) SendAndClose(m *PushDataResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcDemoPushDataServer) Recv() (*PushDataReq, error) {
	m := new(PushDataReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcDemo_FetchData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchDataReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcDemoServer).FetchData(m, &grpcDemoFetchDataServer{stream})
}

type GrpcDemo_FetchDataServer interface {
	Send(*FetchDataResp) error
	grpc.ServerStream
}

type grpcDemoFetchDataServer struct {
	grpc.ServerStream
}

func (x *grpcDemoFetchDataServer) Send(m *FetchDataResp) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcDemo_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcDemoServer).Exchange(&grpcDemoExchangeServer{stream})
}

type GrpcDemo_ExchangeServer interface {
	Send(*ExchangeResp) error
	Recv() (*ExchangeReq, error)
	grpc.ServerStream
}

type grpcDemoExchangeServer struct {
	grpc.ServerStream
}

func (x *grpcDemoExchangeServer) Send(m *ExchangeResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcDemoExchangeServer) Recv() (*ExchangeReq, error) {
	m := new(ExchangeReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcDemo_CallGrpcGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallGrpcGatewayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).CallGrpcGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcDemo_CallGrpcGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).CallGrpcGateway(ctx, req.(*CallGrpcGatewayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcDemo_ServiceDesc is the grpc.ServiceDesc for GrpcDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdemo.GrpcDemo",
	HandlerType: (*GrpcDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _GrpcDemo_UnaryCall_Handler,
		},
		{
			MethodName: "DemoImport",
			Handler:    _GrpcDemo_DemoImport_Handler,
		},
		{
			MethodName: "CallGrpcGateway",
			Handler:    _GrpcDemo_CallGrpcGateway_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushData",
			Handler:       _GrpcDemo_PushData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchData",
			Handler:       _GrpcDemo_FetchData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Exchange",
			Handler:       _GrpcDemo_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcdemo/grpcdemo.proto",
}

const (
	GrpcGatewayDemo_CallGrpcGatewayDemo_FullMethodName = "/grpcdemo.GrpcGatewayDemo/CallGrpcGatewayDemo"
)

// GrpcGatewayDemoClient is the client API for GrpcGatewayDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcGatewayDemoClient interface {
	CallGrpcGatewayDemo(ctx context.Context, in *CallGrpcGatewayDemoReq, opts ...grpc.CallOption) (*CallGrpcGatewayDemoResp, error)
}

type grpcGatewayDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcGatewayDemoClient(cc grpc.ClientConnInterface) GrpcGatewayDemoClient {
	return &grpcGatewayDemoClient{cc}
}

func (c *grpcGatewayDemoClient) CallGrpcGatewayDemo(ctx context.Context, in *CallGrpcGatewayDemoReq, opts ...grpc.CallOption) (*CallGrpcGatewayDemoResp, error) {
	out := new(CallGrpcGatewayDemoResp)
	err := c.cc.Invoke(ctx, GrpcGatewayDemo_CallGrpcGatewayDemo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcGatewayDemoServer is the server API for GrpcGatewayDemo service.
// All implementations must embed UnimplementedGrpcGatewayDemoServer
// for forward compatibility
type GrpcGatewayDemoServer interface {
	CallGrpcGatewayDemo(context.Context, *CallGrpcGatewayDemoReq) (*CallGrpcGatewayDemoResp, error)
	mustEmbedUnimplementedGrpcGatewayDemoServer()
}

// UnimplementedGrpcGatewayDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcGatewayDemoServer struct {
}

func (UnimplementedGrpcGatewayDemoServer) CallGrpcGatewayDemo(context.Context, *CallGrpcGatewayDemoReq) (*CallGrpcGatewayDemoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallGrpcGatewayDemo not implemented")
}
func (UnimplementedGrpcGatewayDemoServer) mustEmbedUnimplementedGrpcGatewayDemoServer() {}

// UnsafeGrpcGatewayDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcGatewayDemoServer will
// result in compilation errors.
type UnsafeGrpcGatewayDemoServer interface {
	mustEmbedUnimplementedGrpcGatewayDemoServer()
}

func RegisterGrpcGatewayDemoServer(s grpc.ServiceRegistrar, srv GrpcGatewayDemoServer) {
	s.RegisterService(&GrpcGatewayDemo_ServiceDesc, srv)
}

func _GrpcGatewayDemo_CallGrpcGatewayDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallGrpcGatewayDemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcGatewayDemoServer).CallGrpcGatewayDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcGatewayDemo_CallGrpcGatewayDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcGatewayDemoServer).CallGrpcGatewayDemo(ctx, req.(*CallGrpcGatewayDemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcGatewayDemo_ServiceDesc is the grpc.ServiceDesc for GrpcGatewayDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcGatewayDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdemo.GrpcGatewayDemo",
	HandlerType: (*GrpcGatewayDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallGrpcGatewayDemo",
			Handler:    _GrpcGatewayDemo_CallGrpcGatewayDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcdemo/grpcdemo.proto",
}
