// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hellopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloStreamClient is the client API for HelloStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloStreamClient interface {
	//单项流
	FetchData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HelloStream_FetchDataClient, error)
	Exchange(ctx context.Context, opts ...grpc.CallOption) (HelloStream_ExchangeClient, error)
}

type helloStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloStreamClient(cc grpc.ClientConnInterface) HelloStreamClient {
	return &helloStreamClient{cc}
}

func (c *helloStreamClient) FetchData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HelloStream_FetchDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloStream_ServiceDesc.Streams[0], "/order.HelloStream/fetchData", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamFetchDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloStream_FetchDataClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type helloStreamFetchDataClient struct {
	grpc.ClientStream
}

func (x *helloStreamFetchDataClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloStreamClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (HelloStream_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloStream_ServiceDesc.Streams[1], "/order.HelloStream/exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamExchangeClient{stream}
	return x, nil
}

type HelloStream_ExchangeClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type helloStreamExchangeClient struct {
	grpc.ClientStream
}

func (x *helloStreamExchangeClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloStreamExchangeClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloStreamServer is the server API for HelloStream service.
// All implementations must embed UnimplementedHelloStreamServer
// for forward compatibility
type HelloStreamServer interface {
	//单项流
	FetchData(*Empty, HelloStream_FetchDataServer) error
	Exchange(HelloStream_ExchangeServer) error
	mustEmbedUnimplementedHelloStreamServer()
}

// UnimplementedHelloStreamServer must be embedded to have forward compatible implementations.
type UnimplementedHelloStreamServer struct {
}

func (UnimplementedHelloStreamServer) FetchData(*Empty, HelloStream_FetchDataServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchData not implemented")
}
func (UnimplementedHelloStreamServer) Exchange(HelloStream_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedHelloStreamServer) mustEmbedUnimplementedHelloStreamServer() {}

// UnsafeHelloStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloStreamServer will
// result in compilation errors.
type UnsafeHelloStreamServer interface {
	mustEmbedUnimplementedHelloStreamServer()
}

func RegisterHelloStreamServer(s grpc.ServiceRegistrar, srv HelloStreamServer) {
	s.RegisterService(&HelloStream_ServiceDesc, srv)
}

func _HelloStream_FetchData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloStreamServer).FetchData(m, &helloStreamFetchDataServer{stream})
}

type HelloStream_FetchDataServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type helloStreamFetchDataServer struct {
	grpc.ServerStream
}

func (x *helloStreamFetchDataServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloStream_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloStreamServer).Exchange(&helloStreamExchangeServer{stream})
}

type HelloStream_ExchangeServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloStreamExchangeServer struct {
	grpc.ServerStream
}

func (x *helloStreamExchangeServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloStreamExchangeServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloStream_ServiceDesc is the grpc.ServiceDesc for HelloStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.HelloStream",
	HandlerType: (*HelloStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchData",
			Handler:       _HelloStream_FetchData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "exchange",
			Handler:       _HelloStream_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
